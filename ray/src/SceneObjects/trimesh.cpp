#include "trimesh.h"
#include <assert.h>
#include <float.h>
#include <string.h>
#include <algorithm>
#include <cmath>
#include "../ui/TraceUI.h"
#include <iostream>


// Used for glm::to_string
#include "glm/ext.hpp"
#define GLM_ENABLE_EXPERIMENTAL

#include <typeinfo>

extern TraceUI* traceUI;
using namespace std;

Trimesh::~Trimesh()
{
	for (auto m : materials)
		delete m;
	for (auto f : faces)
		delete f;
}

// must add vertices, normals, and materials IN ORDER
void Trimesh::addVertex(const glm::dvec3& v)
{
	vertices.emplace_back(v);
}

void Trimesh::addMaterial(Material* m)
{
	materials.emplace_back(m);
}

void Trimesh::addNormal(const glm::dvec3& n)
{
	normals.emplace_back(n);
}

// Returns false if the vertices a,b,c don't all exist
bool Trimesh::addFace(int a, int b, int c)
{
	int vcnt = vertices.size();

	if (a >= vcnt || b >= vcnt || c >= vcnt)
		return false;

	TrimeshFace* newFace = new TrimeshFace(
	        scene, new Material(*this->material), this, a, b, c);
	newFace->setTransform(this->transform);
	if (!newFace->degen)
		faces.push_back(newFace);
	else
		delete newFace;

	// Don't add faces to the scene's object list so we can cull by bounding
	// box
	return true;
}

// Check to make sure that if we have per-vertex materials or normals
// they are the right number.
const char* Trimesh::doubleCheck()
{
	if (!materials.empty() && materials.size() != vertices.size())
		return "Bad Trimesh: Wrong number of materials.";
	if (!normals.empty() && normals.size() != vertices.size())
		return "Bad Trimesh: Wrong number of normals.";

	return 0;
}

bool Trimesh::intersectLocal(ray& r, isect& i) const
{
	bool have_one = false;
	for (auto face : faces) {
		isect cur;
		if (face->intersectLocal(r, cur)) {
			if (!have_one || (cur.getT() < i.getT())) {
				i = cur;
				have_one = true;
			}
		}
	}
	if (!have_one)
		i.setT(1000.0);
	return have_one;
}

bool TrimeshFace::intersect(ray& r, isect& i) const
{
	return intersectLocal(r, i);
}

// Intersect ray r with the triangle abc.  If it hits returns true,
// and put the parameter in t and the barycentric coordinates of the
// intersection in u (alpha) and v (beta).
bool TrimeshFace::intersectLocal(ray& r, isect& i) const
{
	// YOUR CODE HERE
	//
	// FIXME: Add ray-trimesh intersection
	// FIXME: segfault when running easy1
	if(degen) {
		return false;
	}
	auto a = parent->vertices[ids[0]];
	auto b = parent->vertices[ids[1]];
	auto c = parent->vertices[ids[2]];
	auto o = r.getPosition();
	auto v = r.getDirection();
	// cout << glm::to_string(normal) << endl;
	double denom = glm::dot(v, normal);
	// arbitrary constant to make sure no blow up
	if(denom < 0.0001){
		return false;
	}
	auto t = glm::dot(a - o, normal)/denom;
	if(t < 0){
		return false;
	}
	auto p = r.at(t);
	// cout << typeid(glm::dot(glm::cross(b - a,p - a), normal)).name() << " " << endl;
	if(glm::dot(glm::cross(b - a,p - a), normal) < 0){
		return false;
	}
	auto baryu = glm::dot(glm::cross(c - b,p - b), normal)/denom;
	auto baryv = glm::dot(glm::cross(a - c, p - c), normal)/denom;
	if(baryu < 0){
		return false;
	}
	if(baryv < 0){
		return false;
	}
	// cout << baryu << " " << baryv << endl;
	// Does intersect triangle
	i.setT(t);
	// Barycentric coordinates - basically, how can we represent P as an average of vertices?
	// FIXME: Might need to switch around u, v
	i.setBary(baryu, baryv, 1 - baryu - baryv);
	i.setObject(this);

	if(parent->normals.empty())
		parent->generateNormals();
	//cout << "normals: " << parent->normals.size() << endl;
	glm::dvec3 newNorm = glm::dvec3(0, 0, 0);
	newNorm += (1-baryu-baryv) * parent->normals[ids[0]];
	newNorm += baryu * parent->normals[ids[1]];
	newNorm += baryv * parent->normals[ids[2]];
	
	i.setN(-glm::normalize(newNorm));

	if(parent->materials.empty())
	{
		i.setMaterial(*this->material);
		//cout << "curr material: " << glm::to_string(i.getMaterial().kd(i)) << endl;
	}
	else
	{
		Material*  m = new Material();
		*m += (1 - baryu - baryv) * *(parent->materials[ids[0]]);
		*m += baryu * *(parent->materials[ids[1]]);
		*m += baryv * *(parent->materials[ids[2]]);
		i.setMaterial(*m);
	}
	return true;
}

// Once all the verts and faces are loaded, per vertex normals can be
// generated by averaging the normals of the neighboring faces.
void Trimesh::generateNormals()
{
	int cnt = vertices.size();
	normals.resize(cnt);
	std::vector<int> numFaces(cnt, 0);

	for (auto face : faces) {
		glm::dvec3 faceNormal = face->getNormal();

		for (int i = 0; i < 3; ++i) {
			normals[(*face)[i]] += faceNormal;
			++numFaces[(*face)[i]];
		}
	}

	for (int i = 0; i < cnt; ++i) {
		if (numFaces[i])
			normals[i] /= numFaces[i];
	}

	vertNorms = true;
}

